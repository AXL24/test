import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

import java.io.IOException;

public class ElectricConsumptionMapper extends Mapper<LongWritable, Text, Text, IntWritable> {
    private Text year = new Text();
    private IntWritable consumption = new IntWritable();

    @Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        // Tách các trường từ dòng dữ liệu
        String[] fields = value.toString().split(",");
        if (fields.length >= 2) {
            try {
                year.set(fields[0]); // Năm
                consumption.set(Integer.parseInt(fields[1])); // Giá trị tiêu thụ điện trung bình
                context.write(year, consumption);
            } catch (NumberFormatException e) {
                // Bỏ qua nếu không thể chuyển đổi
            }
        }
    }
}






import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

import java.io.IOException;

public class ElectricConsumptionReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
    private static final int MAX_CONSUMPTION = 30;
    private IntWritable result = new IntWritable();

    @Override
    protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
        for (IntWritable val : values) {
            if (val.get() > MAX_CONSUMPTION) {
                result.set(val.get());
                context.write(key, result);
            }
        }
    }
}



import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class ElectricConsumptionDriver {
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("Usage: ElectricConsumptionDriver <input path> <output path>");
            System.exit(-1);
        }

        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Electric Consumption Analysis");

        job.setJarByClass(ElectricConsumptionDriver.class);
        job.setMapperClass(ElectricConsumptionMapper.class);
        job.setReducerClass(ElectricConsumptionReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}

