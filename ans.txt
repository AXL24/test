import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import java.io.IOException;

public class ConsumptionAnalysis {

    // Mapper class
    public static class ConsumptionMapper extends Mapper<Object, Text, Text, IntWritable> {
        private Text year = new Text();
        private IntWritable averageConsumption = new IntWritable();

        @Override
        protected void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            String[] fields = value.toString().split("\t");

            // Bỏ qua dòng đầu tiên (tiêu đề)
            if (fields.length == 14 && !fields[0].equals("avg")) {  
                year.set(fields[0]); // Năm
                int totalConsumption = 0;

                // Tính tổng tiêu thụ điện cho 12 tháng
                for (int i = 1; i < 13; i++) {
                    totalConsumption += Integer.parseInt(fields[i]);
                }

                // Tính trung bình
                int average = totalConsumption / 12;
                averageConsumption.set(average);
                context.write(year, averageConsumption);
            }
        }
    }

    // Reducer class
    public static class ConsumptionReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        @Override
        protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            for (IntWritable val : values) {
                if (val.get() > 30) {  // Kiểm tra xem có lớn hơn 30 không
                    context.write(key, val);
                }
            }
        }
    }

    // Main method
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("Usage: ConsumptionAnalysis <input path> <output path>");
            System.exit(-1);
        }

        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Electric Consumption Analysis");
        job.setJarByClass(ConsumptionAnalysis.class);
        job.setMapperClass(ConsumptionMapper.class);
        job.setReducerClass(ConsumptionReducer.class);
        
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
