import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import java.io.IOException;

public class ElectricityConsumption {

    public static class ConsumptionMapper extends Mapper<Object, Text, Text, DoubleWritable> {
        private Text year = new Text();
        private DoubleWritable avgConsumption = new DoubleWritable();

        public void map(Object key, Text value) throws IOException, InterruptedException {
            String[] fields = value.toString().split("\\s+");
            // Bỏ qua dòng tiêu đề
            if (fields[0].equals("jan")) {
                return;
            }
            year.set(fields[0]); // Năm
            avgConsumption.set(Double.parseDouble(fields[fields.length - 1])); // Cột trung bình
            context.write(year, avgConsumption);
        }
    }

    public static class ConsumptionReducer extends Reducer<Text, DoubleWritable, Text, DoubleWritable> {
        public void reduce(Text key, Iterable<DoubleWritable> values, Context context)
                throws IOException, InterruptedException {
            for (DoubleWritable val : values) {
                if (val.get() > 30) {
                    context.write(key, val);
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "electricity consumption");
        job.setJarByClass(ElectricityConsumption.class);
        job.setMapperClass(ConsumptionMapper.class);
        job.setReducerClass(ConsumptionReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(DoubleWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
